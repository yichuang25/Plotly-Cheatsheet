[["index.html", "Plotly Cheatsheet Chapter 1 Introduction 1.1 Getting Start 1.2 Installation", " Plotly Cheatsheet Taichen Zhou, Yichen Huang 2022-11-08 Chapter 1 Introduction 1.1 Getting Start plotly is an R package for creating interactive web-based graphs via the open source JavaScript graphing library plotly.js. As of version 2.0 (November 17, 2015), graphs created with the plotly R package are rendered locally through the htmlwidgets framework. 1.2 Installation 1.2.1 CRAN Use the install.package() function to install the plotly R package from CRAN. This version may not be the absolute latest version, so we recommend downloading from Github using the instructions below if you can. install.packages(&#39;plotly&#39;) 1.2.2 GitHub Alternatively, you can install the latest development version of plotly from GitHub via the devtools R package: devtools::install_github(&quot;ropensci/plotly&quot;) "],["basic-charts.html", "Chapter 2 Basic Charts 2.1 Scatter Plots 2.2 Line Plots 2.3 Bar Charts 2.4 Pie Charts 2.5 Bubble Charts 2.6 Sankey Diagram", " Chapter 2 Basic Charts 2.1 Scatter Plots 2.1.1 Basic Scatter Plot library(plotly) fig &lt;- plot_ly(data = mtcars, x = ~hp, y= ~mpg, type = &quot;scatter&quot;, mode = &quot;markers&quot;) fig 2.1.2 Styled Scatter Plots library(plotly) fig &lt;- plot_ly(data = mtcars, x = ~hp, y= ~mpg, type = &quot;scatter&quot;, mode = &quot;markers&quot;ï¼Œ marker = list(size = 10, color = &#39;rgba(255, 182, 193, .9)&#39;, line = list(color = &#39;rgba(152, 0, 0, .8)&#39;, width = 2))) fig &lt;- fig %&gt;% layout(title = &#39;Styled Scatter&#39;, yaxis = list(zeroline = FALSE), xaxis = list(zeroline = FALSE)) fig 2.1.3 Qualitative Colorscales library(plotly) fig &lt;- plot_ly(data = mtcars, x = ~hp, y = ~mpg, color = ~cyl) fig 2.2 Line Plots 2.2.1 Basic Line Plot library(plotly) x &lt;- c(1:100) random_y &lt;- rnorm(100, mean = 0) data &lt;- data.frame(x, random_y) fig &lt;- plot_ly(data, x = ~x, y = ~random_y, type = &#39;scatter&#39;, mode = &#39;lines&#39;) fig 2.2.2 Line Plots Mode library(plotly) trace_0 &lt;- rnorm(100, mean = 5) trace_1 &lt;- rnorm(100, mean = 0) trace_2 &lt;- rnorm(100, mean = -5) x &lt;- c(1:100) data &lt;- data.frame(x, trace_0, trace_1, trace_2) fig &lt;- plot_ly(data, x = ~x, y = ~trace_0, name = &#39;trace 0&#39;, type = &#39;scatter&#39;, mode = &#39;lines&#39;) fig &lt;- fig %&gt;% add_trace(y = ~trace_1, name = &#39;trace 1&#39;, mode = &#39;lines+markers&#39;) fig &lt;- fig %&gt;% add_trace(y = ~trace_2, name = &#39;trace 2&#39;, mode = &#39;markers&#39;) fig 2.2.3 Density Plot library(plotly) dens &lt;- with(diamonds, tapply(price, INDEX = cut, density)) df &lt;- data.frame( x = unlist(lapply(dens, &quot;[[&quot;, &quot;x&quot;)), y = unlist(lapply(dens, &quot;[[&quot;, &quot;y&quot;)), cut = rep(names(dens), each = length(dens[[1]]$x)) ) fig &lt;- plot_ly(df, x = ~x, y = ~y, color = ~cut) fig &lt;- fig %&gt;% add_lines() fig 2.3 Bar Charts 2.3.1 Basic Bar Chart library(plotly) fig &lt;- plot_ly( x = c(&quot;giraffes&quot;, &quot;orangutans&quot;, &quot;monkeys&quot;), y = c(20, 14, 23), name = &quot;SF Zoo&quot;, type = &quot;bar&quot; ) fig 2.3.2 Grouped Bar Chart library(plotly) Animals &lt;- c(&quot;giraffes&quot;, &quot;orangutans&quot;, &quot;monkeys&quot;) SF_Zoo &lt;- c(20, 14, 23) LA_Zoo &lt;- c(12, 18, 29) data &lt;- data.frame(Animals, SF_Zoo, LA_Zoo) fig &lt;- plot_ly(data, x = ~Animals, y = ~SF_Zoo, type = &#39;bar&#39;, name = &#39;SF Zoo&#39;) fig &lt;- fig %&gt;% add_trace(y = ~LA_Zoo, name = &#39;LA Zoo&#39;) fig &lt;- fig %&gt;% layout(yaxis = list(title = &#39;Count&#39;), barmode = &#39;group&#39;) fig 2.3.3 Stacked Bar Chart library(plotly) Animals &lt;- c(&quot;giraffes&quot;, &quot;orangutans&quot;, &quot;monkeys&quot;) SF_Zoo &lt;- c(20, 14, 23) LA_Zoo &lt;- c(12, 18, 29) data &lt;- data.frame(Animals, SF_Zoo, LA_Zoo) fig &lt;- plot_ly(data, x = ~Animals, y = ~SF_Zoo, type = &#39;bar&#39;, name = &#39;SF Zoo&#39;) fig &lt;- fig %&gt;% add_trace(y = ~LA_Zoo, name = &#39;LA Zoo&#39;) fig &lt;- fig %&gt;% layout(yaxis = list(title = &#39;Count&#39;), barmode = &#39;stack&#39;) fig 2.3.4 Colored and Styled Bar Chart library(plotly) x &lt;- c(1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012) roW &lt;- c(219, 146, 112, 127, 124, 180, 236, 207, 236, 263, 350, 430, 474, 526, 488, 537, 500, 439) China &lt;- c(16, 13, 10, 11, 28, 37, 43, 55, 56, 88, 105, 156, 270, 299, 340, 403, 549, 499) data &lt;- data.frame(x, roW, China) fig &lt;- plot_ly(data, x = ~x, y = ~roW, type = &#39;bar&#39;, name = &#39;Rest of the World&#39;, marker = list(color = &#39;rgb(55, 83, 109)&#39;)) fig &lt;- fig %&gt;% add_trace(y = ~China, name = &#39;China&#39;, marker = list(color = &#39;rgb(26, 118, 255)&#39;)) fig &lt;- fig %&gt;% layout(title = &#39;US Export of Plastic Scrap&#39;, xaxis = list( title = &quot;&quot;, tickfont = list( size = 14, color = &#39;rgb(107, 107, 107)&#39;)), yaxis = list( title = &#39;USD (millions)&#39;, titlefont = list( size = 16, color = &#39;rgb(107, 107, 107)&#39;), tickfont = list( size = 14, color = &#39;rgb(107, 107, 107)&#39;)), legend = list(x = 0, y = 1, bgcolor = &#39;rgba(255, 255, 255, 0)&#39;, bordercolor = &#39;rgba(255, 255, 255, 0)&#39;), barmode = &#39;group&#39;, bargap = 0.15, bargroupgap = 0.1) fig 2.4 Pie Charts 2.4.1 Basic Pie Chart library(plotly) USPersonalExpenditure &lt;- data.frame(&quot;Categorie&quot;=rownames(USPersonalExpenditure), USPersonalExpenditure) data &lt;- USPersonalExpenditure[,c(&#39;Categorie&#39;, &#39;X1960&#39;)] fig &lt;- plot_ly(data, labels = ~Categorie, values = ~X1960, type = &#39;pie&#39;) fig &lt;- fig %&gt;% layout(title = &#39;United States Personal Expenditures by Categories in 1960&#39;, xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE), yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE)) fig 2.4.2 Donut Chart library(plotly) library(dplyr) # Get Manufacturer mtcars$manuf &lt;- sapply(strsplit(rownames(mtcars), &quot; &quot;), &quot;[[&quot;, 1) df &lt;- mtcars df &lt;- df %&gt;% group_by(manuf) df &lt;- df %&gt;% summarize(count = n()) fig &lt;- df %&gt;% plot_ly(labels = ~manuf, values = ~count) fig &lt;- fig %&gt;% add_pie(hole = 0.6) fig &lt;- fig %&gt;% layout(title = &quot;Donut charts using Plotly&quot;, showlegend = F, xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE), yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE)) fig 2.5 Bubble Charts 2.5.1 Simple Bubble Chart library(plotly) data &lt;- read.csv(&quot;https://raw.githubusercontent.com/plotly/datasets/master/school_earnings.csv&quot;) fig &lt;- plot_ly(data, x = ~Women, y = ~Men, text = ~School, type = &#39;scatter&#39;, mode = &#39;markers&#39;, marker = list(size = ~Gap, opacity = 0.5)) fig &lt;- fig %&gt;% layout(title = &#39;Gender Gap in Earnings per University&#39;, xaxis = list(showgrid = FALSE), yaxis = list(showgrid = FALSE)) fig 2.5.2 Mapping a Color Variable (Continuous) library(plotly) data &lt;- read.csv(&quot;https://raw.githubusercontent.com/plotly/datasets/master/school_earnings.csv&quot;) fig &lt;- plot_ly(data, x = ~Women, y = ~Men, text = ~School, type = &#39;scatter&#39;, mode = &#39;markers&#39;, color = ~Gap, colors = &#39;Reds&#39;, marker = list(size = ~Gap, opacity = 0.5)) fig &lt;- fig %&gt;% layout(title = &#39;Gender Gap in Earnings per University&#39;, xaxis = list(showgrid = FALSE), yaxis = list(showgrid = FALSE)) fig 2.5.3 Mapping a Color Variable (Categorical) library(plotly) data &lt;- read.csv(&quot;https://raw.githubusercontent.com/plotly/datasets/master/school_earnings.csv&quot;) data$State &lt;- as.factor(c(&#39;Massachusetts&#39;, &#39;California&#39;, &#39;Massachusetts&#39;, &#39;Pennsylvania&#39;, &#39;New Jersey&#39;, &#39;Illinois&#39;, &#39;Washington DC&#39;, &#39;Massachusetts&#39;, &#39;Connecticut&#39;, &#39;New York&#39;, &#39;North Carolina&#39;, &#39;New Hampshire&#39;, &#39;New York&#39;, &#39;Indiana&#39;, &#39;New York&#39;, &#39;Michigan&#39;, &#39;Rhode Island&#39;, &#39;California&#39;, &#39;Georgia&#39;, &#39;California&#39;, &#39;California&#39;)) fig &lt;- plot_ly(data, x = ~Women, y = ~Men, text = ~School, type = &#39;scatter&#39;, mode = &#39;markers&#39;, size = ~Gap, color = ~State, colors = &#39;Paired&#39;, marker = list(opacity = 0.5, sizemode = &#39;diameter&#39;)) fig &lt;- fig %&gt;% layout(title = &#39;Gender Gap in Earnings per University&#39;, xaxis = list(showgrid = FALSE), yaxis = list(showgrid = FALSE), showlegend = FALSE) fig 2.5.4 Styled Buble Chart library(plotly) data &lt;- read.csv(&quot;https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv&quot;) data_2007 &lt;- data[which(data$year == 2007),] data_2007 &lt;- data_2007[order(data_2007$continent, data_2007$country),] slope &lt;- 2.666051223553066e-05 data_2007$size &lt;- sqrt(data_2007$pop * slope) colors &lt;- c(&#39;#4AC6B7&#39;, &#39;#1972A4&#39;, &#39;#965F8A&#39;, &#39;#FF7070&#39;, &#39;#C61951&#39;) fig &lt;- plot_ly(data_2007, x = ~gdpPercap, y = ~lifeExp, color = ~continent, size = ~size, colors = colors, type = &#39;scatter&#39;, mode = &#39;markers&#39;, sizes = c(min(data_2007$size), max(data_2007$size)), marker = list(symbol = &#39;circle&#39;, sizemode = &#39;diameter&#39;, line = list(width = 2, color = &#39;#FFFFFF&#39;)), text = ~paste(&#39;Country:&#39;, country, &#39;&lt;br&gt;Life Expectancy:&#39;, lifeExp, &#39;&lt;br&gt;GDP:&#39;, gdpPercap, &#39;&lt;br&gt;Pop.:&#39;, pop)) fig &lt;- fig %&gt;% layout(title = &#39;Life Expectancy v. Per Capita GDP, 2007&#39;, xaxis = list(title = &#39;GDP per capita (2000 dollars)&#39;, gridcolor = &#39;rgb(255, 255, 255)&#39;, range = c(2.003297660701705, 5.191505530708712), type = &#39;log&#39;, zerolinewidth = 1, ticklen = 5, gridwidth = 2), yaxis = list(title = &#39;Life Expectancy (years)&#39;, gridcolor = &#39;rgb(255, 255, 255)&#39;, range = c(36.12621671352166, 91.72921793264332), zerolinewidth = 1, ticklen = 5, gridwith = 2), paper_bgcolor = &#39;rgb(243, 243, 243)&#39;, plot_bgcolor = &#39;rgb(243, 243, 243)&#39;) fig 2.6 Sankey Diagram 2.6.1 Basic Sankey Diagram library(plotly) fig &lt;- plot_ly( type = &quot;sankey&quot;, orientation = &quot;h&quot;, node = list( label = c(&quot;A1&quot;, &quot;A2&quot;, &quot;B1&quot;, &quot;B2&quot;, &quot;C1&quot;, &quot;C2&quot;), color = c(&quot;blue&quot;, &quot;blue&quot;, &quot;blue&quot;, &quot;blue&quot;, &quot;blue&quot;, &quot;blue&quot;), pad = 15, thickness = 20, line = list( color = &quot;black&quot;, width = 0.5 ) ), link = list( source = c(0,1,0,2,3,3), target = c(2,3,3,4,4,5), value = c(8,4,2,8,4,2) ) ) fig &lt;- fig %&gt;% layout( title = &quot;Basic Sankey Diagram&quot;, font = list( size = 10 ) ) fig 2.6.2 Style Sankey Diagram library(plotly) library(rjson) json_file &lt;- &quot;https://raw.githubusercontent.com/plotly/plotly.js/master/test/image/mocks/sankey_energy_dark.json&quot; json_data &lt;- fromJSON(paste(readLines(json_file), collapse=&quot;&quot;)) fig &lt;- plot_ly( type = &quot;sankey&quot;, domain = list( x = c(0,1), y = c(0,1) ), orientation = &quot;h&quot;, valueformat = &quot;.0f&quot;, valuesuffix = &quot;TWh&quot;, node = list( label = json_data$data[[1]]$node$label, color = json_data$data[[1]]$node$color, pad = 15, thickness = 15, line = list( color = &quot;black&quot;, width = 0.5 ) ), link = list( source = json_data$data[[1]]$link$source, target = json_data$data[[1]]$link$target, value = json_data$data[[1]]$link$value, label = json_data$data[[1]]$link$label ) ) fig &lt;- fig %&gt;% layout( title = &quot;Energy forecast for 2050&lt;br&gt;Source: Department of Energy &amp; Climate Change, Tom Counsell via &lt;a href=&#39;https://bost.ocks.org/mike/sankey/&#39;&gt;Mike Bostock&lt;/a&gt;&quot;, font = list( size = 10, color = &#39;white&#39; ), xaxis = list(showgrid = F, zeroline = F, showticklabels = F), yaxis = list(showgrid = F, zeroline = F, showticklabels = F), plot_bgcolor = &#39;black&#39;, paper_bgcolor = &#39;black&#39; ) fig "],["statistical-charts.html", "Chapter 3 Statistical Charts 3.1 2D Histograms 3.2 Box Plot 3.3 Histograms 3.4 Violin Plots", " Chapter 3 Statistical Charts 3.1 2D Histograms A 2D histogram is a visualization of a bivariate distribution. And it looks like a heat map. # library(plotly) s &lt;- matrix(c(1, -.75, -.75, 1), ncol = 2) obs &lt;- mvtnorm::rmvnorm(500, sigma = s) fig &lt;- plot_ly(data = mtcars, x = ~hp, y= ~mpg) fig2 &lt;- subplot( fig %&gt;% add_markers(alpha = 0.2), fig %&gt;% add_histogram2d() ) fig2 3.2 Box Plot 3.2.1 Basic Boxplot library(plotly) fig &lt;- plot_ly(data = mtcars, y= ~mpg, type = &quot;box&quot;) fig 3.2.2 Horizontal Boxplot library(plotly) fig &lt;- plot_ly(data = mtcars, x= ~mpg, type = &quot;box&quot;) fig 3.2.3 Adding Jittered Points library(plotly) fig &lt;- plot_ly(data = mtcars, y= ~mpg, type = &quot;box&quot;, boxpoints = &quot;all&quot;, jitter = 0.3) fig 3.2.4 Several Box Plots fig &lt;- plot_ly(data = mtcars, y= ~mpg, color = ~as.factor(cyl), type = &quot;box&quot;) fig 3.3 Histograms 3.3.1 Basic Histograms library(plotly) fig &lt;- plot_ly(data = mtcars, x = ~hp, type = &quot;histogram&quot;, nbinsx = 15) fig 3.3.2 Stacked Histogram fig &lt;- plot_ly(data = mtcars, x = ~hp, type = &quot;histogram&quot;, cumulative = list(enabled=TRUE), nbinsx = 15) fig 3.4 Violin Plots fig &lt;- mtcars %&gt;% plot_ly( y = ~hp, type = &#39;violin&#39;, box = list( visible = T ), meanline = list( visible = T ), x0 = &#39;Horse Power&#39; ) fig &lt;- fig %&gt;% layout( yaxis = list( title = &quot;&quot;, zeroline = F ) ) fig "],["scientific-charts.html", "Chapter 4 Scientific Charts 4.1 Log Plots 4.2 Contour Plots 4.3 Heatmaps 4.4 Parallel Coordinates 4.5 Polar Charts 4.6 Radar Charts", " Chapter 4 Scientific Charts 4.1 Log Plots 4.1.1 Log Axes library(plotly) d &lt;- diamonds[sample(nrow(diamonds), 1000), ] # without log scales fig &lt;- plot_ly(d, x = ~carat, y = ~price) %&gt;% add_markers() fig # with log scales fig &lt;- layout(fig, xaxis = list(type = &quot;log&quot;), yaxis = list(type = &quot;log&quot;)) fig 4.2 Contour Plots 4.2.1 Basic Contour library(plotly) fig &lt;- plot_ly(z = ~volcano, type = &quot;contour&quot;) fig 4.2.2 Smoothing Contour Coloring library(plotly) fig &lt;- plot_ly( type = &#39;contour&#39;, z = matrix(c(10, 10.625, 12.5, 15.625, 20, 5.625, 6.25, 8.125, 11.25, 15.625, 2.5, 3.125, 5, 8.125, 12.5, 0.625, 1.25, 3.125, 6.25, 10.625, 0, 0.625, 2.5, 5.625, 10), nrow=5, ncol=5), contours = list( coloring = &#39;heatmap&#39; ) ) fig 4.3 Heatmaps 4.3.1 Basic Heatmap library(plotly) fig &lt;- plot_ly(z = volcano, type = &quot;heatmap&quot;) fig 4.3.2 Sequential Colorscales: Greys fig &lt;- plot_ly(z = volcano, colors = &quot;Greys&quot;, type = &quot;heatmap&quot;) fig 4.4 Parallel Coordinates 4.4.1 Basic Parallel Cordinates Plots library(plotly) df &lt;- read.csv(&quot;https://raw.githubusercontent.com/bcdunbar/datasets/master/iris.csv&quot;) fig &lt;- df %&gt;% plot_ly(type = &#39;parcoords&#39;, line = list(color = ~species_id, colorscale = list(c(0,&#39;red&#39;),c(0.5,&#39;green&#39;),c(1,&#39;blue&#39;))), dimensions = list( list(range = c(2,4.5), label = &#39;Sepal Width&#39;, values = ~sepal_width), list(range = c(4,8), constraintrange = c(5,6), label = &#39;Sepal Length&#39;, values = ~sepal_length), list(range = c(0,2.5), label = &#39;Petal Width&#39;, values = ~petal_width), list(range = c(1,7), label = &#39;Petal Length&#39;, values = ~petal_length) ) ) fig 4.4.2 Advanced Parallel Coordinates Plot library(plotly) df &lt;- read.csv(&quot;https://raw.githubusercontent.com/bcdunbar/datasets/master/parcoords_data.csv&quot;) fig &lt;- df %&gt;% plot_ly(width = 1000, height = 600) fig &lt;- fig %&gt;% add_trace(type = &#39;parcoords&#39;, line = list(color = ~colorVal, colorscale = &#39;Jet&#39;, showscale = TRUE, reversescale = TRUE, cmin = -4000, cmax = -100), dimensions = list( list(range = c(~min(blockHeight),~max(blockHeight)), constraintrange = c(100000,150000), label = &#39;Block Height&#39;, values = ~blockHeight), list(range = c(~min(blockWidth),~max(blockWidth)), label = &#39;Block Width&#39;, values = ~blockWidth), list(tickvals = c(0,0.5,1,2,3), ticktext = c(&#39;A&#39;,&#39;AB&#39;,&#39;B&#39;,&#39;Y&#39;,&#39;Z&#39;), label = &#39;Cyclinder Material&#39;, values = ~cycMaterial), list(range = c(-1,4), tickvals = c(0,1,2,3), label = &#39;Block Material&#39;, values = ~blockMaterial), list(range = c(~min(totalWeight),~max(totalWeight)), visible = TRUE, label = &#39;Total Weight&#39;, values = ~totalWeight), list(range = c(~min(assemblyPW),~max(assemblyPW)), label = &#39;Assembly Penalty Weight&#39;, values = ~assemblyPW), list(range = c(~min(HstW),~max(HstW)), label = &#39;Height st Width&#39;, values = ~HstW), list(range = c(~min(minHW),~max(minHW)), label = &#39;Min Height Width&#39;, values = ~minHW), list(range = c(~min(minWD),~max(minWD)), label = &#39;Min Width Diameter&#39;, values = ~minWD), list(range = c(~min(rfBlock),~max(rfBlock)), label = &#39;RF Block&#39;, values = ~rfBlock) ) ) fig 4.5 Polar Charts 4.5.1 Basic Polar Charts library(plotly) fig &lt;- plot_ly( type = &#39;scatterpolar&#39;, r = c(0,1,2,2), theta = c(0,45,90,0), mode = &#39;markers&#39; ) fig 4.5.2 Line Polar Charts library(plotly) df &lt;- read.csv(&quot;https://raw.githubusercontent.com/plotly/datasets/master/polar_dataset.csv&quot;) fig &lt;- plot_ly( df, type = &#39;scatterpolar&#39;, mode = &#39;lines&#39; ) fig &lt;- fig %&gt;% add_trace( r = ~x1, theta = ~y, name = &#39;Figure8&#39;, line = list( color = &#39;peru&#39; ) ) fig &lt;- fig %&gt;% add_trace( r = ~x2, theta = ~y, name = &#39;Cardioid&#39;, line = list( color = &#39;darkviolet&#39; ) ) fig &lt;- fig %&gt;% add_trace( r = ~x3, theta = ~y, name = &#39;Hypercardioid&#39;, line = list( color = &#39;deepskyblue&#39; ) ) fig &lt;- fig %&gt;% add_trace( r = ~x4, theta = ~y, name = &#39;Subcardioid&#39;, line = list( color = &#39;orangered&#39; ) ) fig &lt;- fig %&gt;% add_trace( r = ~x5, theta = ~y, name = &#39;Supercardioid&#39;, line = list( color = &#39;green&#39; ) ) fig &lt;- fig %&gt;% layout( title = &#39;Mic Patterns&#39;, font = list( family = &#39;Arial&#39;, size = 12, color = &#39;#000&#39; ), showlegend = F ) fig 4.5.3 Area Polar Area library(plotly) fig &lt;- plot_ly( type = &#39;scatterpolar&#39;, mode = &#39;lines&#39; ) fig &lt;- fig %&gt;% add_trace( r = c(0, 1.5, 1.5, 0, 2.5, 2.5, 0), theta = c(0, 10, 25, 0, 205, 215, 0), fill = &#39;toself&#39;, fillcolor = &#39;#709Bff&#39;, line = list( color = &#39;black&#39; ) ) fig &lt;- fig %&gt;% add_trace( r = c(0, 3.5, 3.5, 0), theta = c(0, 55, 75, 0), fill = &#39;toself&#39;, fillcolor = &#39;#E4FF87&#39;, line = list( color = &#39;black&#39; ) ) fig &lt;- fig %&gt;% add_trace( r = c(0, 4.5, 4.5, 0, 4.5, 4.5, 0), theta = c(0, 100, 120, 0, 305, 320, 0), fill = &#39;toself&#39;, fillcolor = &#39;#FFAA70&#39;, line = list( color = &#39;black&#39; ) ) fig &lt;- fig %&gt;% add_trace( r = c(0, 4, 4, 0), theta = c(0, 165, 195, 0), fill = &#39;toself&#39;, fillcolor = &#39;#FFDF70&#39;, line = list( color = &#39;black&#39; ) ) fig &lt;- fig %&gt;% add_trace( r = c(0, 3, 3, 0), theta = c(0, 262.5, 277.5, 0), fill = &#39;toself&#39;, fillcolor = &#39;#B6FFB4&#39;, line = list( color = &#39;black&#39; ) ) fig &lt;- fig %&gt;% layout( polar = list( radialaxis = list( visible = T, range = c(0,5) ) ), showlegend = F ) fig 4.6 Radar Charts 4.6.1 Basic Radar Charts library(plotly) fig &lt;- plot_ly( type = &#39;scatterpolar&#39;, r = c(39, 28, 8, 7, 28, 39), theta = c(&#39;A&#39;,&#39;B&#39;,&#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;A&#39;), fill = &#39;toself&#39; ) fig &lt;- fig %&gt;% layout( polar = list( radialaxis = list( visible = T, range = c(0,50) ) ), showlegend = F ) fig 4.6.2 Multiple Trace Radar Charts library(plotly) fig &lt;- plot_ly( type = &#39;scatterpolar&#39;, fill = &#39;toself&#39; ) fig &lt;- fig %&gt;% add_trace( r = c(39, 28, 8, 7, 28, 39), theta = c(&#39;A&#39;,&#39;B&#39;,&#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;A&#39;), name = &#39;Group A&#39; ) fig &lt;- fig %&gt;% add_trace( r = c(1.5, 10, 39, 31, 15, 1.5), theta = c(&#39;A&#39;,&#39;B&#39;,&#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;A&#39;), name = &#39;Group B&#39; ) fig &lt;- fig %&gt;% layout( polar = list( radialaxis = list( visible = T, range = c(0,50) ) ) ) fig "],["financial-charts.html", "Chapter 5 Financial Charts 5.1 Time Series and Date Axess 5.2 Candlestick Charts 5.3 OHLC Charts 5.4 Waterfall Charts 5.5 Funnel Charts", " Chapter 5 Financial Charts 5.1 Time Series and Date Axess 5.1.1 Time Series using Axes of type date library(plotly) stock &lt;- read.csv(&#39;https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv&#39;) fig &lt;- plot_ly(stock, type = &#39;scatter&#39;, mode = &#39;lines&#39;)%&gt;% add_trace(x = ~Date, y = ~AAPL.High)%&gt;% layout(showlegend = F) fig &lt;- fig %&gt;% layout( xaxis = list(zerolinecolor = &#39;#ffff&#39;, zerolinewidth = 2, gridcolor = &#39;ffff&#39;), yaxis = list(zerolinecolor = &#39;#ffff&#39;, zerolinewidth = 2, gridcolor = &#39;ffff&#39;), plot_bgcolor=&#39;#e5ecf6&#39;, width = 900) fig 5.1.2 Configuring Tick Labels library(tidyquant) library(plotly) tickers = c(&quot;GOOG&quot;, &quot;AAPL&quot;, &quot;AMZN&quot;, &quot;META&quot;, &quot;NFLX&quot;, &quot;MSFT&quot;) for (i in tickers){ getSymbols(i, from = &quot;2020-01-01&quot;, to = &quot;2021-12-31&quot;)} stock &lt;- data.frame(GOOG$GOOG.Adjusted, AAPL$AAPL.Adjusted, AMZN$AMZN.Adjusted, META$META.Adjusted, NFLX$NFLX.Adjusted, MSFT$MSFT.Adjusted) stock$GOOG.Adjusted &lt;- stock$GOOG.Adjusted/stock$GOOG.Adjusted[1] stock$AAPL.Adjusted &lt;- stock$AAPL.Adjusted/stock$AAPL.Adjusted[1] stock$AMZN.Adjusted &lt;- stock$AMZN.Adjusted/stock$AMZN.Adjusted[1] stock$META.Adjusted &lt;- stock$META.Adjusted/stock$META.Adjusted[1] stock$NFLX.Adjusted &lt;- stock$NFLX.Adjusted/stock$NFLX.Adjusted[1] stock$MSFT.Adjusted &lt;- stock$MSFT.Adjusted/stock$MSFT.Adjusted[1] stock &lt;- data.frame(stock,rownames(stock)) colnames(stock) &lt;- append(tickers,&#39;Dates&#39;) fig &lt;- plot_ly(stock, type = &#39;scatter&#39;, mode = &#39;lines&#39;)%&gt;% add_trace(x = ~Dates, y = ~GOOG, name = &#39;GOOG&#39;)%&gt;% add_trace(x = ~Dates, y = ~AAPL, name = &#39;AAPL&#39;)%&gt;% add_trace(x = ~Dates, y = ~AMZN, name = &#39;AMZN&#39;)%&gt;% add_trace(x = ~Dates, y = ~META, name = &#39;META&#39;)%&gt;% add_trace(x = ~Dates, y = ~NFLX, name = &#39;NFLX&#39;)%&gt;% add_trace(x = ~Dates, y = ~MSFT, name = &#39;MSFT&#39;)%&gt;% layout(title = &#39;custom tick labels&#39;,legend=list(title=list(text=&#39;variable&#39;)), xaxis = list(dtick = &quot;M1&quot;, tickformat=&quot;%b&lt;br&gt;%Y&quot;), width = 1000) options(warn = -1) fig &lt;- fig %&gt;% layout( xaxis = list(zerolinecolor = &#39;#ffff&#39;, zerolinewidth = 2, gridcolor = &#39;ffff&#39;), yaxis = list(zerolinecolor = &#39;#ffff&#39;, zerolinewidth = 2, gridcolor = &#39;ffff&#39;), plot_bgcolor=&#39;#e5ecf6&#39;) fig 5.1.3 Time Series with Range Selector Buttons library(plotly) stock &lt;- read.csv(&#39;https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv&#39;) fig &lt;- plot_ly(stock, type = &#39;scatter&#39;, mode = &#39;lines&#39;)%&gt;% add_trace(x = ~Date, y = ~AAPL.High)%&gt;% layout(showlegend = F, title=&#39;Time Series with Range Slider and Selectors&#39;, xaxis = list(rangeslider = list(visible = T), rangeselector=list( buttons=list( list(count=1, label=&quot;1m&quot;, step=&quot;month&quot;, stepmode=&quot;backward&quot;), list(count=6, label=&quot;6m&quot;, step=&quot;month&quot;, stepmode=&quot;backward&quot;), list(count=1, label=&quot;YTD&quot;, step=&quot;year&quot;, stepmode=&quot;todate&quot;), list(count=1, label=&quot;1y&quot;, step=&quot;year&quot;, stepmode=&quot;backward&quot;), list(step=&quot;all&quot;) )))) fig &lt;- fig %&gt;% layout( xaxis = list(zerolinecolor = &#39;#ffff&#39;, zerolinewidth = 2, gridcolor = &#39;ffff&#39;), yaxis = list(zerolinecolor = &#39;#ffff&#39;, zerolinewidth = 2, gridcolor = &#39;ffff&#39;), plot_bgcolor=&#39;#e5ecf6&#39;, margin = 0.1, width = 900) fig 5.2 Candlestick Charts 5.2.1 Basic Candlestick library(plotly) library(quantmod) getSymbols(&quot;AAPL&quot;,src=&#39;yahoo&#39;) # basic example of ohlc charts df &lt;- data.frame(Date=index(AAPL),coredata(AAPL)) df &lt;- tail(df, 30) fig &lt;- df %&gt;% plot_ly(x = ~Date, type=&quot;candlestick&quot;, open = ~AAPL.Open, close = ~AAPL.Close, high = ~AAPL.High, low = ~AAPL.Low) fig &lt;- fig %&gt;% layout(title = &quot;Basic Candlestick Chart&quot;) fig ## [1] &quot;AAPL&quot; 5.2.2 Customise the fig ure with Shapes and Annotations library(plotly) library(quantmod) getSymbols(&quot;AAPL&quot;,src=&#39;yahoo&#39;) df &lt;- data.frame(Date=index(AAPL),coredata(AAPL)) # annotation a &lt;- list(text = &quot;Stock Split&quot;, x = &#39;2014-06-06&#39;, y = 1.02, xref = &#39;x&#39;, yref = &#39;paper&#39;, xanchor = &#39;left&#39;, showarrow = FALSE ) # use shapes to create a line l &lt;- list(type = line, x0 = &#39;2014-06-06&#39;, x1 = &#39;2014-06-06&#39;, y0 = 0, y1 = 1, xref = &#39;x&#39;, yref = &#39;paper&#39;, line = list(color = &#39;black&#39;, width = 0.5) ) fig &lt;- df %&gt;% plot_ly(x = ~Date, type=&quot;candlestick&quot;, open = ~AAPL.Open, close = ~AAPL.Close, high = ~AAPL.High, low = ~AAPL.Low) fig &lt;- fig %&gt;% layout(title = &quot;Apple Stock&quot;, annotations = a, shapes = l) fig ## [1] &quot;AAPL&quot; 5.3 OHLC Charts 5.3.1 Basic OHLC Chart library(plotly) library(quantmod) getSymbols(&quot;AAPL&quot;,src=&#39;yahoo&#39;) df &lt;- data.frame(Date=index(AAPL),coredata(AAPL)) df &lt;- tail(df, 30) fig &lt;- df %&gt;% plot_ly(x = ~Date, type=&quot;ohlc&quot;, open = ~AAPL.Open, close = ~AAPL.Close, high = ~AAPL.High, low = ~AAPL.Low) fig &lt;- fig %&gt;% layout(title = &quot;Basic OHLC Chart&quot;, xaxis = list(rangeslider = list(visible = F))) fig ## [1] &quot;AAPL&quot; 5.3.2 Customise the Figure with Shapes and Annotations library(plotly) library(quantmod) getSymbols(&quot;AAPL&quot;,src=&#39;yahoo&#39;) df &lt;- data.frame(Date=index(AAPL),coredata(AAPL)) # annotation a &lt;- list(text = &quot;Stock Split&quot;, x = &#39;2014-06-06&#39;, y = 1.02, xref = &#39;x&#39;, yref = &#39;paper&#39;, xanchor = &#39;left&#39;, showarrow = FALSE ) # use shapes to create a line l &lt;- list(type = line, x0 = &#39;2014-06-06&#39;, x1 = &#39;2014-06-06&#39;, y0 = 0, y1 = 1, xref = &#39;x&#39;, yref = &#39;paper&#39;, line = list(color = &#39;black&#39;, width = 0.5) ) fig &lt;- df %&gt;% plot_ly(x = ~Date, type=&quot;ohlc&quot;, open = ~AAPL.Open, close = ~AAPL.Close, high = ~AAPL.High, low = ~AAPL.Low) fig &lt;- fig %&gt;% layout(title = &quot;Custom Colors&quot;, annotations = a, shapes = l) fig ## [1] &quot;AAPL&quot; 5.4 Waterfall Charts 5.4.1 Basic Waterfall Chart library(plotly) x= list(&quot;Sales&quot;, &quot;Consulting&quot;, &quot;Net revenue&quot;, &quot;Purchases&quot;, &quot;Other expenses&quot;, &quot;Profit before tax&quot;) measure= c(&quot;relative&quot;, &quot;relative&quot;, &quot;total&quot;, &quot;relative&quot;, &quot;relative&quot;, &quot;total&quot;) text= c(&quot;+60&quot;, &quot;+80&quot;, &quot;&quot;, &quot;-40&quot;, &quot;-20&quot;, &quot;Total&quot;) y= c(60, 80, 0, -40, -20, 0) data = data.frame(x=factor(x,levels=x),measure,text,y) fig &lt;- plot_ly( data, name = &quot;20&quot;, type = &quot;waterfall&quot;, measure = ~measure, x = ~x, textposition = &quot;outside&quot;, y= ~y, text =~text, connector = list(line = list(color= &quot;rgb(63, 63, 63)&quot;))) fig &lt;- fig %&gt;% layout(title = &quot;Profit and loss statement 2018&quot;, xaxis = list(title = &quot;&quot;), yaxis = list(title = &quot;&quot;), autosize = TRUE, showlegend = TRUE) fig 5.5 Funnel Charts # Need to install plotly from Github to get funnel plots devtools::install_github(&quot;ropensci/plotly&quot;) 5.5.1 Basic Funnel Plot library(plotly) fig &lt;- plot_ly() fig &lt;- fig %&gt;% add_trace( type = &quot;funnel&quot;, y = c(&quot;Website visit&quot;, &quot;Downloads&quot;, &quot;Potential customers&quot;, &quot;Requested price&quot;, &quot;invoice sent&quot;), x = c(39, 27.4, 20.6, 11, 2)) fig &lt;- fig %&gt;% layout(yaxis = list(categoryarray = c(&quot;Website visit&quot;, &quot;Downloads&quot;, &quot;Potential customers&quot;, &quot;Requested price&quot;, &quot;invoice sent&quot;))) fig 5.5.2 Stacked Funnel Plot library(plotly) fig &lt;- plot_ly( type = &quot;funnel&quot;, name = &#39;Montreal&#39;, y = c(&quot;Website visit&quot;, &quot;Downloads&quot;, &quot;Potential customers&quot;, &quot;Requested price&quot;), x = c(120, 60, 30, 20), textinfo = &quot;value+percent initial&quot;) fig &lt;- fig %&gt;% add_trace( type = &quot;funnel&quot;, name = &#39;Toronto&#39;, orientation = &quot;h&quot;, y = c(&quot;Website visit&quot;, &quot;Downloads&quot;, &quot;Potential customers&quot;, &quot;Requested price&quot;, &quot;invoice sent&quot;), x = c(100, 60, 40, 30, 20), textposition = &quot;inside&quot;, textinfo = &quot;value+percent previous&quot;) fig &lt;- fig %&gt;% add_trace( type = &quot;funnel&quot;, name = &#39;Vancouver&#39;, orientation = &quot;h&quot;, y = c(&quot;Website visit&quot;, &quot;Downloads&quot;, &quot;Potential customers&quot;, &quot;Requested price&quot;, &quot;invoice sent&quot;, &quot;Finalized&quot;), x = c(90, 70, 50, 30, 10, 5), textposition = &quot;outside&quot;, textinfo = &quot;value+percent total&quot;) fig &lt;- fig %&gt;% layout(yaxis = list(categoryarray = c(&quot;Website visit&quot;, &quot;Downloads&quot;, &quot;Potential customers&quot;, &quot;Requested price&quot;, &quot;invoice sent&quot;, &quot;Finalized&quot;))) fig 5.5.3 Basic Area Funnel Plot library(plotly) fig &lt;- plot_ly( type = &quot;funnelarea&quot;, text = c(&quot;The 1st&quot;,&quot;The 2nd&quot;, &quot;The 3rd&quot;, &quot;The 4th&quot;, &quot;The 5th&quot;), values = c(5, 4, 3, 2, 1)) fig "],["maps.html", "Chapter 6 Maps 6.1 Choropleth Maps 6.2 Scatter Plots on Maps 6.3 Mapbox Density 6.4 Mapbox Layers 6.5 Bubble Maps", " Chapter 6 Maps 6.1 Choropleth Maps 6.1.1 Choropleth Map Using GeoJSON library(plotly) library(rjson) url &lt;- &#39;https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json&#39; counties &lt;- rjson::fromJSON(file=url) url2&lt;- &quot;https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv&quot; df &lt;- read.csv(url2, colClasses=c(fips=&quot;character&quot;)) g &lt;- list( scope = &#39;usa&#39;, projection = list(type = &#39;albers usa&#39;), showlakes = TRUE, lakecolor = toRGB(&#39;white&#39;) ) fig &lt;- plot_ly() fig &lt;- fig %&gt;% add_trace( type=&quot;choropleth&quot;, geojson=counties, locations=df$fips, z=df$unemp, colorscale=&quot;Viridis&quot;, zmin=0, zmax=12, marker=list(line=list( width=0) ) ) fig &lt;- fig %&gt;% colorbar(title = &quot;Unemployment Rate (%)&quot;) fig &lt;- fig %&gt;% layout( title = &quot;2016 US Unemployment by County&quot; ) fig &lt;- fig %&gt;% layout( geo = g ) fig 6.1.2 Indexing by GeoJSON Properties library(plotly) library(rjson) url &lt;- &#39;https://raw.githubusercontent.com/plotly/datasets/master/election.geojson&#39; geojson &lt;- rjson::fromJSON(file=url) url2&lt;- &quot;https://raw.githubusercontent.com/plotly/datasets/master/election.csv&quot; df &lt;- read.csv(url2) g &lt;- list( fitbounds = &quot;locations&quot;, visible = FALSE ) fig &lt;- plot_ly() fig &lt;- fig %&gt;% add_trace( type=&quot;choropleth&quot;, geojson=geojson, locations=df$district, z=df$Bergeron, colorscale=&quot;Viridis&quot;, featureidkey=&quot;properties.district&quot; ) fig &lt;- fig %&gt;% layout( geo = g ) fig &lt;- fig %&gt;% colorbar(title = &quot;Bergeron Votes&quot;) fig &lt;- fig %&gt;% layout( title = &quot;2013 Montreal Election&quot; ) fig 6.1.3 Customize choropleth chart library(plotly) df &lt;- read.csv(&quot;https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv&quot;) df$hover &lt;- with(df, paste(state, &#39;&lt;br&gt;&#39;, &quot;Beef&quot;, beef, &quot;Dairy&quot;, dairy, &quot;&lt;br&gt;&quot;, &quot;Fruits&quot;, total.fruits, &quot;Veggies&quot;, total.veggies, &quot;&lt;br&gt;&quot;, &quot;Wheat&quot;, wheat, &quot;Corn&quot;, corn)) # give state boundaries a white border l &lt;- list(color = toRGB(&quot;white&quot;), width = 2) # specify some map projection/options g &lt;- list( scope = &#39;usa&#39;, projection = list(type = &#39;albers usa&#39;), showlakes = TRUE, lakecolor = toRGB(&#39;white&#39;) ) fig &lt;- plot_geo(df, locationmode = &#39;USA-states&#39;) fig &lt;- fig %&gt;% add_trace( z = ~total.exports, text = ~hover, locations = ~code, color = ~total.exports, colors = &#39;Purples&#39; ) fig &lt;- fig %&gt;% colorbar(title = &quot;Millions USD&quot;) fig &lt;- fig %&gt;% layout( title = &#39;2011 US Agriculture Exports by State&lt;br&gt;(Hover for breakdown)&#39;, geo = g ) fig 6.1.4 World Choropleth Map df &lt;- read.csv(&#39;https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv&#39;) # light grey boundaries l &lt;- list(color = toRGB(&quot;grey&quot;), width = 0.5) # specify map projection/options g &lt;- list( showframe = FALSE, showcoastlines = FALSE, projection = list(type = &#39;Mercator&#39;) ) fig &lt;- plot_geo(df) fig &lt;- fig %&gt;% add_trace( z = ~GDP..BILLIONS., color = ~GDP..BILLIONS., colors = &#39;Blues&#39;, text = ~COUNTRY, locations = ~CODE, marker = list(line = l) ) fig &lt;- fig %&gt;% colorbar(title = &#39;GDP Billions US$&#39;, tickprefix = &#39;$&#39;) fig &lt;- fig %&gt;% layout( title = &#39;2014 Global GDP&lt;br&gt;Source:&lt;a href=&quot;https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html&quot;&gt;CIA World Factbook&lt;/a&gt;&#39;, geo = g ) fig 6.2 Scatter Plots on Maps 6.2.1 Basic Scatter on Map library(plotly) df &lt;- read.csv(&#39;https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv&#39;) # geo styling g &lt;- list( scope = &#39;usa&#39;, projection = list(type = &#39;albers usa&#39;), showland = TRUE, landcolor = toRGB(&quot;gray95&quot;), subunitcolor = toRGB(&quot;gray85&quot;), countrycolor = toRGB(&quot;gray85&quot;), countrywidth = 0.5, subunitwidth = 0.5 ) fig &lt;- plot_geo(df, lat = ~lat, lon = ~long) fig &lt;- fig %&gt;% add_markers( text = ~paste(airport, city, state, paste(&quot;Arrivals:&quot;, cnt), sep = &quot;&lt;br /&gt;&quot;), color = ~cnt, symbol = I(&quot;square&quot;), size = I(8), hoverinfo = &quot;text&quot; ) fig &lt;- fig %&gt;% colorbar(title = &quot;Incoming flights&lt;br /&gt;February 2011&quot;) fig &lt;- fig %&gt;% layout( title = &#39;Most trafficked US airports&lt;br /&gt;(Hover for airport)&#39;, geo = g ) fig 6.2.2 Style Scatter Map Layout library(plotly) df &lt;- read.csv(&#39;https://raw.githubusercontent.com/plotly/datasets/master/2015_06_30_precipitation.csv&#39;) # change default color scale title m &lt;- list(colorbar = list(title = &quot;Total Inches&quot;)) # geo styling g &lt;- list( scope = &#39;north america&#39;, showland = TRUE, landcolor = toRGB(&quot;grey83&quot;), subunitcolor = toRGB(&quot;white&quot;), countrycolor = toRGB(&quot;white&quot;), showlakes = TRUE, lakecolor = toRGB(&quot;white&quot;), showsubunits = TRUE, showcountries = TRUE, resolution = 50, projection = list( type = &#39;conic conformal&#39;, rotation = list(lon = -100) ), lonaxis = list( showgrid = TRUE, gridwidth = 0.5, range = c(-140, -55), dtick = 5 ), lataxis = list( showgrid = TRUE, gridwidth = 0.5, range = c(20, 60), dtick = 5 ) ) fig &lt;- plot_geo(df, lat = ~Lat, lon = ~Lon, color = ~Globvalue) fig &lt;- fig %&gt;% add_markers( text = ~paste(df$Globvalue, &quot;inches&quot;), hoverinfo = &quot;text&quot; ) fig &lt;- fig %&gt;% layout(title = &#39;US Precipitation 06-30-2015&lt;br&gt;Source: NOAA&#39;, geo = g) fig 6.3 Mapbox Density 6.3.1 Mapbox Access Token library(plotly) quakes = read.csv(&#39;https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv&#39;) fig &lt;- quakes fig &lt;- fig %&gt;% plot_ly( type = &#39;densitymapbox&#39;, lat = ~Latitude, lon = ~Longitude, coloraxis = &#39;coloraxis&#39;, radius = 10) fig &lt;- fig %&gt;% layout( mapbox = list( style=&quot;stamen-terrain&quot;, center= list(lon=180)), coloraxis = list(colorscale = &quot;Viridis&quot;)) fig 6.4 Mapbox Layers 6.4.1 OpenStreetMap Tiles, no Token Needed library(plotly) us_cities = read.csv(&quot;https://raw.githubusercontent.com/plotly/datasets/master/us-cities-top-1k.csv&quot;) fig &lt;- us_cities fig &lt;- fig %&gt;% plot_ly( lat = ~lat, lon = ~lon, marker = list(color = &quot;fuchsia&quot;), type = &#39;scattermapbox&#39;, hovertext = us_cities[,&quot;City&quot;]) fig &lt;- fig %&gt;% layout( mapbox = list( style = &#39;open-street-map&#39;, zoom =2.5, center = list(lon = -88, lat = 34))) fig 6.4.2 Base Map Below A Trace: No Token Needed library(plotly) us_cities = read.csv(&quot;https://raw.githubusercontent.com/plotly/datasets/master/us-cities-top-1k.csv&quot;) fig &lt;- us_cities fig &lt;- fig %&gt;% plot_ly( lat = ~lat, lon = ~lon, type = &quot;scattermapbox&quot;, hovertext = us_cities[,&quot;City&quot;], marker = list(color = &quot;fuchsia&quot;)) fig &lt;- fig %&gt;% layout(mapbox= list( style = &quot;white-bg&quot;, zoom = 3, center = list(lon = -93 ,lat= 41), layers = list(list( below = &#39;traces&#39;, sourcetype = &quot;raster&quot;, source = list(&quot;https://basemap.nationalmap.gov/arcgis/rest/services/USGSImageryOnly/MapServer/tile/{z}/{y}/{x}&quot;))))) fig 6.5 Bubble Maps 6.5.1 United States Bubble Map library(plotly) df &lt;- read.csv(&#39;https://raw.githubusercontent.com/plotly/datasets/master/2014_us_cities.csv&#39;) df$q &lt;- with(df, cut(pop, quantile(pop))) levels(df$q) &lt;- paste(c(&quot;1st&quot;, &quot;2nd&quot;, &quot;3rd&quot;, &quot;4th&quot;, &quot;5th&quot;), &quot;Quantile&quot;) df$q &lt;- as.ordered(df$q) g &lt;- list( scope = &#39;usa&#39;, projection = list(type = &#39;albers usa&#39;), showland = TRUE, landcolor = toRGB(&quot;gray85&quot;), subunitwidth = 1, countrywidth = 1, subunitcolor = toRGB(&quot;white&quot;), countrycolor = toRGB(&quot;white&quot;) ) fig &lt;- plot_geo(df, locationmode = &#39;USA-states&#39;, sizes = c(1, 250)) fig &lt;- fig %&gt;% add_markers( x = ~lon, y = ~lat, size = ~pop, color = ~q, hoverinfo = &quot;text&quot;, text = ~paste(df$name, &quot;&lt;br /&gt;&quot;, df$pop/1e6, &quot; million&quot;) ) fig &lt;- fig %&gt;% layout(title = &#39;2014 US city populations&lt;br&gt;(Click legend to toggle)&#39;, geo = g) fig "],["artificial-intelligence-and-machine-learning.html", "Chapter 7 Artificial Intelligence and Machine Learning 7.1 ML Regression in R 7.2 ROC and PR Curves 7.3 PCA Visulization 7.4 t-SNE and UMAP projections", " Chapter 7 Artificial Intelligence and Machine Learning 7.1 ML Regression in R 7.1.1 Linear Regression with R library(reshape2) library(tidyverse) library(tidymodels) library(plotly) data(tips) y &lt;- tips$tip X &lt;- tips$total_bill set.seed(123) tips_split &lt;- initial_split(tips) tips_training &lt;- tips_split %&gt;% training() tips_test &lt;- tips_split %&gt;% testing() lm_model &lt;- linear_reg() %&gt;% set_engine(&#39;lm&#39;) %&gt;% set_mode(&#39;regression&#39;) %&gt;% fit(tip ~ total_bill, data = tips_training) x_range &lt;- seq(min(X), max(X), length.out = 100) x_range &lt;- matrix(x_range, nrow=100, ncol=1) xdf &lt;- data.frame(x_range) colnames(xdf) &lt;- c(&#39;total_bill&#39;) ydf &lt;- lm_model %&gt;% predict(xdf) colnames(ydf) &lt;- c(&#39;tip&#39;) xy &lt;- data.frame(xdf, ydf) fig &lt;- plot_ly(data = tips_training, x = ~total_bill, y = ~tip, type = &#39;scatter&#39;, name = &#39;train&#39;, mode = &#39;markers&#39;, alpha = 0.65) %&gt;% add_trace(data = tips_test, x = ~total_bill, y = ~tip, type = &#39;scatter&#39;, name = &#39;test&#39;, mode = &#39;markers&#39;, alpha = 0.65 ) %&gt;% add_trace(data = xy, x = ~total_bill, y = ~tip, name = &#39;prediction&#39;, mode = &#39;lines&#39;, alpha = 1) fig 7.2 ROC and PR Curves 7.2.1 ROC and PR Curves library(plotly) library(tidymodels) set.seed(0) X &lt;- matrix(rnorm(10000),nrow=500) y &lt;- sample(0:1, 500, replace=TRUE) data &lt;- data.frame(X,y) data$y &lt;- as.factor(data$y) X &lt;- subset(data,select = -c(y)) logistic_glm &lt;- logistic_reg() %&gt;% set_engine(&quot;glm&quot;) %&gt;% set_mode(&quot;classification&quot;) %&gt;% fit(y ~ ., data = data) y_scores &lt;- logistic_glm %&gt;% predict(X, type = &#39;prob&#39;) y_score &lt;- y_scores$.pred_1 db &lt;- data.frame(data$y, y_score) z &lt;- roc_curve(data = db, &#39;data.y&#39;, &#39;y_score&#39;) z$specificity &lt;- 1 - z$specificity colnames(z) &lt;- c(&#39;threshold&#39;, &#39;tpr&#39;, &#39;fpr&#39;) fig1 &lt;- plot_ly(x= y_score, color = data$y, colors = c(&#39;blue&#39;, &#39;red&#39;), type = &#39;histogram&#39;, alpha = 0.5, nbinsx = 50) %&gt;% layout(barmode = &quot;overlay&quot;) fig1 fig2 &lt;- plot_ly(data = z, x = ~threshold) %&gt;% add_trace(y = ~fpr, mode = &#39;lines&#39;, name = &#39;False Positive Rate&#39;, type = &#39;scatter&#39;)%&gt;% add_trace(y = ~tpr, mode = &#39;lines&#39;, name = &#39;True Positive Rate&#39;, type = &#39;scatter&#39;)%&gt;% layout(title = &#39;TPR and FPR at every threshold&#39;) fig2 &lt;- fig2 %&gt;% layout(legend=list(title=list(text=&#39;&lt;b&gt; Rate &lt;/b&gt;&#39;))) fig2 7.2.2 Basic binary ROC curve library(dplyr) library(ggplot2) library(plotly) library(pROC) set.seed(0) X &lt;- matrix(rnorm(10000),nrow=500) y &lt;- sample(0:1, 500, replace=TRUE) db &lt;- data.frame(X,y) db$y &lt;- as.factor(db$y) test_data = db[1:20] model&lt;- logistic_reg() %&gt;% set_engine(&quot;glm&quot;) %&gt;% set_mode(&quot;classification&quot;) %&gt;% # Fit the model fit(y ~., data = db) ypred &lt;- predict(model, new_data = test_data, type = &quot;prob&quot;) yscore &lt;- data.frame(ypred$.pred_0) rdb &lt;- cbind(db$y,yscore) colnames(rdb) = c(&#39;y&#39;,&#39;yscore&#39;) pdb &lt;- roc_curve(rdb, y, yscore) pdb$specificity &lt;- 1 - pdb$specificity auc = roc_auc(rdb, y, yscore) auc = auc$.estimate tit = paste(&#39;ROC Curve (AUC = &#39;,toString(round(auc,2)),&#39;)&#39;,sep = &#39;&#39;) fig &lt;- plot_ly(data = pdb ,x = ~specificity, y = ~sensitivity, type = &#39;scatter&#39;, mode = &#39;lines&#39;, fill = &#39;tozeroy&#39;) %&gt;% layout(title = tit,xaxis = list(title = &quot;False Positive Rate&quot;), yaxis = list(title = &quot;True Positive Rate&quot;)) %&gt;% add_segments(x = 0, xend = 1, y = 0, yend = 1, line = list(dash = &quot;dash&quot;, color = &#39;black&#39;),inherit = FALSE, showlegend = FALSE) fig 7.2.3 Multiclass ROC Curve library(plotly) library(tidymodels) library(fastDummies) # Artificially add noise to make task harder data(iris) ind &lt;- sample.int(150, 50) samples &lt;- sample(x = iris$Species, size = 50) iris[ind,&#39;Species&#39;] = samples # Define the inputs and outputs X &lt;- subset(iris, select = -c(Species)) iris$Species &lt;- as.factor(iris$Species) # Fit the model logistic &lt;- multinom_reg() %&gt;% set_engine(&quot;nnet&quot;) %&gt;% set_mode(&quot;classification&quot;) %&gt;% fit(Species ~ ., data = iris) y_scores &lt;- logistic %&gt;% predict(X, type = &#39;prob&#39;) # One hot encode the labels in order to plot them y_onehot &lt;- dummy_cols(iris$Species) colnames(y_onehot) &lt;- c(&#39;drop&#39;, &#39;setosa&#39;, &#39;versicolor&#39;, &#39;virginica&#39;) y_onehot &lt;- subset(y_onehot, select = -c(drop)) z = cbind(y_scores, y_onehot) z$setosa &lt;- as.factor(z$setosa) roc_setosa &lt;- roc_curve(data = z, setosa, .pred_setosa) roc_setosa$specificity &lt;- 1 - roc_setosa$specificity colnames(roc_setosa) &lt;- c(&#39;threshold&#39;, &#39;tpr&#39;, &#39;fpr&#39;) auc_setosa &lt;- roc_auc(data = z, setosa, .pred_setosa) auc_setosa &lt;- auc_setosa$.estimate setosa &lt;- paste(&#39;setosa (AUC=&#39;,toString(round(1-auc_setosa,2)),&#39;)&#39;,sep = &#39;&#39;) z$versicolor &lt;- as.factor(z$versicolor) roc_versicolor &lt;- roc_curve(data = z, versicolor, .pred_versicolor) roc_versicolor$specificity &lt;- 1 - roc_versicolor$specificity colnames(roc_versicolor) &lt;- c(&#39;threshold&#39;, &#39;tpr&#39;, &#39;fpr&#39;) auc_versicolor &lt;- roc_auc(data = z, versicolor, .pred_versicolor) auc_versicolor &lt;- auc_versicolor$.estimate versicolor &lt;- paste(&#39;versicolor (AUC=&#39;,toString(round(1-auc_versicolor,2)),&#39;)&#39;, sep = &#39;&#39;) z$virginica &lt;- as.factor(z$virginica) roc_virginica &lt;- roc_curve(data = z, virginica, .pred_virginica) roc_virginica$specificity &lt;- 1 - roc_virginica$specificity colnames(roc_virginica) &lt;- c(&#39;threshold&#39;, &#39;tpr&#39;, &#39;fpr&#39;) auc_virginica &lt;- roc_auc(data = z, virginica, .pred_virginica) auc_virginica &lt;- auc_virginica$.estimate virginica &lt;- paste(&#39;virginica (AUC=&#39;,toString(round(1-auc_virginica,2)),&#39;)&#39;,sep = &#39;&#39;) # Create an empty figure, and iteratively add a line for each class fig &lt;- plot_ly()%&gt;% add_segments(x = 0, xend = 1, y = 0, yend = 1, line = list(dash = &quot;dash&quot;, color = &#39;black&#39;), showlegend = FALSE) %&gt;% add_trace(data = roc_setosa,x = ~fpr, y = ~tpr, mode = &#39;lines&#39;, name = setosa, type = &#39;scatter&#39;)%&gt;% add_trace(data = roc_versicolor,x = ~fpr, y = ~tpr, mode = &#39;lines&#39;, name = versicolor, type = &#39;scatter&#39;)%&gt;% add_trace(data = roc_virginica,x = ~fpr, y = ~tpr, mode = &#39;lines&#39;, name = virginica, type = &#39;scatter&#39;)%&gt;% layout(xaxis = list( title = &quot;False Positive Rate&quot; ), yaxis = list( title = &quot;True Positive Rate&quot; ),legend = list(x = 100, y = 0.5)) fig 7.3 PCA Visulization 7.3.1 Visualize all the original dimensions library(plotly) data(iris) axis = list(showline=FALSE, zeroline=FALSE, gridcolor=&#39;#ffff&#39;, ticklen=4, titlefont=list(size=13)) fig &lt;- iris %&gt;% plot_ly() fig &lt;- fig %&gt;% add_trace( type = &#39;splom&#39;, dimensions = list( list(label=&#39;sepal length&#39;, values=~Sepal.Length), list(label=&#39;sepal width&#39;, values=~Sepal.Width), list(label=&#39;petal length&#39;, values=~Petal.Length), list(label=&#39;petal width&#39;, values=~Petal.Width) ), color = ~Species, colors = c(&#39;#636EFA&#39;,&#39;#EF553B&#39;,&#39;#00CC96&#39;) , marker = list( size = 7, line = list( width = 1, color = &#39;rgb(230,230,230)&#39; ) ) ) fig &lt;- fig %&gt;% style(diagonal = list(visible = FALSE)) fig &lt;- fig %&gt;% layout( hovermode=&#39;closest&#39;, dragmode= &#39;select&#39;, plot_bgcolor=&#39;rgba(240,240,240, 0.95)&#39;, xaxis=list(domain=NULL, showline=F, zeroline=F, gridcolor=&#39;#ffff&#39;, ticklen=4), yaxis=list(domain=NULL, showline=F, zeroline=F, gridcolor=&#39;#ffff&#39;, ticklen=4), xaxis2=axis, xaxis3=axis, xaxis4=axis, yaxis2=axis, yaxis3=axis, yaxis4=axis ) fig 7.3.2 Visualize all the principal components library(plotly) library(stats) data(iris) X &lt;- subset(iris, select = -c(Species)) prin_comp &lt;- prcomp(X) explained_variance_ratio &lt;- summary(prin_comp)[[&quot;importance&quot;]][&#39;Proportion of Variance&#39;,] explained_variance_ratio &lt;- 100 * explained_variance_ratio components &lt;- prin_comp[[&quot;x&quot;]] components &lt;- data.frame(components) components &lt;- cbind(components, iris$Species) components$PC3 &lt;- -components$PC3 components$PC2 &lt;- -components$PC2 axis = list(showline=FALSE, zeroline=FALSE, gridcolor=&#39;#ffff&#39;, ticklen=4, titlefont=list(size=13)) fig &lt;- components %&gt;% plot_ly() %&gt;% add_trace( type = &#39;splom&#39;, dimensions = list( list(label=paste(&#39;PC 1 (&#39;,toString(round(explained_variance_ratio[1],1)),&#39;%)&#39;,sep = &#39;&#39;), values=~PC1), list(label=paste(&#39;PC 2 (&#39;,toString(round(explained_variance_ratio[2],1)),&#39;%)&#39;,sep = &#39;&#39;), values=~PC2), list(label=paste(&#39;PC 3 (&#39;,toString(round(explained_variance_ratio[3],1)),&#39;%)&#39;,sep = &#39;&#39;), values=~PC3), list(label=paste(&#39;PC 4 (&#39;,toString(round(explained_variance_ratio[4],1)),&#39;%)&#39;,sep = &#39;&#39;), values=~PC4) ), color = ~iris$Species, colors = c(&#39;#636EFA&#39;,&#39;#EF553B&#39;,&#39;#00CC96&#39;) ) %&gt;% style(diagonal = list(visible = FALSE)) %&gt;% layout( legend=list(title=list(text=&#39;color&#39;)), hovermode=&#39;closest&#39;, dragmode= &#39;select&#39;, plot_bgcolor=&#39;rgba(240,240,240, 0.95)&#39;, xaxis=list(domain=NULL, showline=F, zeroline=F, gridcolor=&#39;#ffff&#39;, ticklen=4), yaxis=list(domain=NULL, showline=F, zeroline=F, gridcolor=&#39;#ffff&#39;, ticklen=4), xaxis2=axis, xaxis3=axis, xaxis4=axis, yaxis2=axis, yaxis3=axis, yaxis4=axis ) fig 7.3.3 Visualize a subset of the principal components library(plotly) library(stats) library(MASS) db = Boston prin_comp &lt;- prcomp(db, rank. = 4) components &lt;- prin_comp[[&quot;x&quot;]] components &lt;- data.frame(components) components &lt;- cbind(components, db$medv) components$PC2 &lt;- -components$PC2 colnames(components)[5] = &#39;Median_Price&#39; tot_explained_variance_ratio &lt;- summary(prin_comp)[[&quot;importance&quot;]][&#39;Proportion of Variance&#39;,] tot_explained_variance_ratio &lt;- 100 * sum(tot_explained_variance_ratio) tit = &#39;Total Explained Variance = 99.56&#39; axis = list(showline=FALSE, zeroline=FALSE, gridcolor=&#39;#ffff&#39;, ticklen=4) fig &lt;- components %&gt;% plot_ly() %&gt;% add_trace( type = &#39;splom&#39;, dimensions = list( list(label=&#39;PC1&#39;, values=~PC1), list(label=&#39;PC2&#39;, values=~PC2), list(label=&#39;PC3&#39;, values=~PC3), list(label=&#39;PC4&#39;, values=~PC4) ), color=~Median_Price, marker = list( size = 7 ) ) %&gt;% style(diagonal = list(visible = F)) %&gt;% layout( title= tit, hovermode=&#39;closest&#39;, dragmode= &#39;select&#39;, plot_bgcolor=&#39;rgba(240,240,240, 0.95)&#39;, xaxis=list(domain=NULL, showline=F, zeroline=F, gridcolor=&#39;#ffff&#39;, ticklen=4), yaxis=list(domain=NULL, showline=F, zeroline=F, gridcolor=&#39;#ffff&#39;, ticklen=4), xaxis2=axis, xaxis3=axis, xaxis4=axis, yaxis2=axis, yaxis3=axis, yaxis4=axis ) options(warn=-1) fig 7.3.4 Visualize PCA with scatter3d data(&quot;iris&quot;) X &lt;- subset(iris, select = -c(Species)) prin_comp &lt;- prcomp(X, rank. = 3) components &lt;- prin_comp[[&quot;x&quot;]] components &lt;- data.frame(components) components$PC2 &lt;- -components$PC2 components$PC3 &lt;- -components$PC3 components = cbind(components, iris$Species) tot_explained_variance_ratio &lt;- summary(prin_comp)[[&quot;importance&quot;]][&#39;Proportion of Variance&#39;,] tot_explained_variance_ratio &lt;- 100 * sum(tot_explained_variance_ratio) tit = &#39;Total Explained Variance = 99.48&#39; fig &lt;- plot_ly(components, x = ~PC1, y = ~PC2, z = ~PC3, color = ~iris$Species, colors = c(&#39;#636EFA&#39;,&#39;#EF553B&#39;,&#39;#00CC96&#39;) ) %&gt;% add_markers(size = 12) fig &lt;- fig %&gt;% layout( title = tit, scene = list(bgcolor = &quot;#e5ecf6&quot;) ) fig 7.3.5 Visualize Loadings library(plotly) library(stats) data(iris) X &lt;- subset(iris, select = -c(Species)) prin_comp &lt;- prcomp(X, rank = 2) components &lt;- prin_comp[[&quot;x&quot;]] components &lt;- data.frame(components) components &lt;- cbind(components, iris$Species) components$PC2 &lt;- -components$PC2 explained_variance &lt;- summary(prin_comp)[[&quot;sdev&quot;]] explained_variance &lt;- explained_variance[1:2] comp &lt;- prin_comp[[&quot;rotation&quot;]] comp[,&#39;PC2&#39;] &lt;- - comp[,&#39;PC2&#39;] loadings &lt;- comp for (i in seq(explained_variance)){ loadings[,i] &lt;- comp[,i] * explained_variance[i] } features = c(&#39;sepal_length&#39;, &#39;sepal_width&#39;, &#39;petal_length&#39;, &#39;petal_width&#39;) fig &lt;- plot_ly(components, x = ~PC1, y = ~PC2, color = ~iris$Species, colors = c(&#39;#636EFA&#39;,&#39;#EF553B&#39;,&#39;#00CC96&#39;), type = &#39;scatter&#39;, mode = &#39;markers&#39;) %&gt;% layout( legend=list(title=list(text=&#39;color&#39;)), plot_bgcolor = &quot;#e5ecf6&quot;, xaxis = list( title = &quot;0&quot;), yaxis = list( title = &quot;1&quot;)) for (i in seq(4)){ fig &lt;- fig %&gt;% add_segments(x = 0, xend = loadings[i, 1], y = 0, yend = loadings[i, 2], line = list(color = &#39;black&#39;),inherit = FALSE, showlegend = FALSE) %&gt;% add_annotations(x=loadings[i, 1], y=loadings[i, 2], ax = 0, ay = 0,text = features[i], xanchor = &#39;center&#39;, yanchor= &#39;bottom&#39;) } fig 7.4 t-SNE and UMAP projections 7.4.1 Basic t-SNE projections library(plotly) library(stats) data(iris) X &lt;- subset(iris, select = -c(Species)) axis = list(showline=FALSE, zeroline=FALSE, gridcolor=&#39;#ffff&#39;, ticklen=4) fig &lt;- iris %&gt;% plot_ly() %&gt;% add_trace( type = &#39;splom&#39;, dimensions = list( list(label = &#39;sepal_width&#39;,values=~Sepal.Width), list(label = &#39;sepal_length&#39;,values=~Sepal.Length), list(label =&#39;petal_width&#39;,values=~Petal.Width), list(label = &#39;petal_length&#39;,values=~Petal.Length)), color = ~Species, colors = c(&#39;#636EFA&#39;,&#39;#EF553B&#39;,&#39;#00CC96&#39;) ) fig &lt;- fig %&gt;% layout( legend=list(title=list(text=&#39;species&#39;)), hovermode=&#39;closest&#39;, dragmode= &#39;select&#39;, plot_bgcolor=&#39;rgba(240,240,240,0.95)&#39;, xaxis=list(domain=NULL, showline=F, zeroline=F, gridcolor=&#39;#ffff&#39;, ticklen=4), yaxis=list(domain=NULL, showline=F, zeroline=F, gridcolor=&#39;#ffff&#39;, ticklen=4), xaxis2=axis, xaxis3=axis, xaxis4=axis, yaxis2=axis, yaxis3=axis, yaxis4=axis ) fig 7.4.2 Project data into 2D with t-SNE library(tsne) library(plotly) data(&quot;iris&quot;) features &lt;- subset(iris, select = -c(Species)) set.seed(0) tsne &lt;- tsne(features, initial_dims = 2) tsne &lt;- data.frame(tsne) pdb &lt;- cbind(tsne,iris$Species) options(warn = -1) fig &lt;- plot_ly(data = pdb ,x = ~X1, y = ~X2, type = &#39;scatter&#39;, mode = &#39;markers&#39;, split = ~iris$Species) fig &lt;- fig %&gt;% layout( plot_bgcolor = &quot;#e5ecf6&quot; ) fig 7.4.3 Project data into 3D with t-SNE library(tsne) library(plotly) data(&quot;iris&quot;) features &lt;- subset(iris, select = -c(Species)) #set.seed(0) tsne &lt;- tsne(features, initial_dims = 3, k =3) tsne &lt;- data.frame(tsne) pdb &lt;- cbind(tsne,iris$Species) options(warn = -1) fig &lt;- plot_ly(data = pdb ,x = ~X1, y = ~X2, z = ~X3, color = ~iris$Species, colors = c(&#39;#636EFA&#39;,&#39;#EF553B&#39;,&#39;#00CC96&#39;) ) %&gt;% add_markers(size = 8) %&gt;% layout( xaxis = list( zerolinecolor = &quot;#ffff&quot;, zerolinewidth = 2, gridcolor=&#39;#ffff&#39;), yaxis = list( zerolinecolor = &quot;#ffff&quot;, zerolinewidth = 2, gridcolor=&#39;#ffff&#39;), scene =list(bgcolor = &quot;#e5ecf6&quot;)) fig 7.4.4 Projections with UMAP library(plotly) library(umap) iris.data = iris[, grep(&quot;Sepal|Petal&quot;, colnames(iris))] iris.labels = iris[, &quot;Species&quot;] iris.umap = umap(iris.data, n_components = 2, random_state = 15) layout &lt;- iris.umap[[&quot;layout&quot;]] layout &lt;- data.frame(layout) final &lt;- cbind(layout, iris$Species) fig &lt;- plot_ly(final, x = ~X1, y = ~X2, color = ~iris$Species, colors = c(&#39;#636EFA&#39;,&#39;#EF553B&#39;,&#39;#00CC96&#39;), type = &#39;scatter&#39;, mode = &#39;markers&#39;)%&gt;% layout( plot_bgcolor = &quot;#e5ecf6&quot;, legend=list(title=list(text=&#39;species&#39;)), xaxis = list( title = &quot;0&quot;), yaxis = list( title = &quot;1&quot;)) iris.umap = umap(iris.data, n_components = 3, random_state = 15) layout &lt;- iris.umap[[&quot;layout&quot;]] layout &lt;- data.frame(layout) final &lt;- cbind(layout, iris$Species) fig2 &lt;- plot_ly(final, x = ~X1, y = ~X2, z = ~X3, color = ~iris$Species, colors = c(&#39;#636EFA&#39;,&#39;#EF553B&#39;,&#39;#00CC96&#39;)) fig2 &lt;- fig2 %&gt;% add_markers() fig2 &lt;- fig2 %&gt;% layout(scene = list(xaxis = list(title = &#39;0&#39;), yaxis = list(title = &#39;1&#39;), zaxis = list(title = &#39;2&#39;))) fig fig2 7.4.5 Visualizing image datasets library(rsvd) library(plotly) library(umap) data(&#39;digits&#39;) digits.data = digits[, grep(&quot;pixel&quot;, colnames(digits))] digits.labels = digits[, &quot;label&quot;] digits.umap = umap(digits.data, n_components = 2, k = 10) layout &lt;- digits.umap[[&quot;layout&quot;]] layout &lt;- data.frame(layout) final &lt;- cbind(layout, digits[,&#39;label&#39;]) colnames(final) &lt;- c(&#39;X1&#39;, &#39;X2&#39;, &#39;label&#39;) fig &lt;- plot_ly(final, x = ~X1, y = ~X2, split = ~label, type = &#39;scatter&#39;, mode = &#39;markers&#39;)%&gt;% layout( plot_bgcolor = &quot;#e5ecf6&quot;, legend=list(title=list(text=&#39;digit&#39;)), xaxis = list( title = &quot;0&quot;), yaxis = list( title = &quot;1&quot;)) fig "],["d-charts.html", "Chapter 8 3D Charts", " Chapter 8 3D Charts 8.0.1 Basic 3D Scatter Plot library(plotly) mtcars$am[which(mtcars$am == 0)] &lt;- &#39;Automatic&#39; mtcars$am[which(mtcars$am == 1)] &lt;- &#39;Manual&#39; mtcars$am &lt;- as.factor(mtcars$am) fig &lt;- plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec, color = ~am, colors = c(&#39;pink&#39;, &#39;blue&#39;)) fig &lt;- fig %&gt;% add_markers(size = 10) fig &lt;- fig %&gt;% layout(scene = list(xaxis = list(title = &#39;Weight&#39;), yaxis = list(title = &#39;Gross horsepower&#39;), zaxis = list(title = &#39;1/4 mile time&#39;))) fig 8.0.2 Basic 3D Surface Plot # volcano is a numeric matrix that ships with R fig &lt;- plot_ly(z = ~volcano) fig &lt;- fig %&gt;% add_surface() fig "],["transforms.html", "Chapter 9 Transforms 9.1 Filter 9.2 Group 9.3 Aggregation", " Chapter 9 Transforms 9.1 Filter 9.1.1 Basic Example library(plotly) fig &lt;- plot_ly( type = &#39;scatter&#39;, x = mtcars$hp, y = mtcars$qsec, text = rownames(mtcars), hoverinfo = &#39;text&#39;, mode = &#39;markers&#39;, transforms = list( list( type = &#39;filter&#39;, target = &#39;y&#39;, operation = &#39;&gt;&#39;, value = mean(mtcars$qsec) ) ) ) fig 9.2 Group 9.2.1 Basic Example library(plotly) fig &lt;- plot_ly( type = &#39;scatter&#39;, x = mtcars$hp, y = mtcars$qsec, text = paste(&quot;Make: &quot;, rownames(mtcars), &quot;&lt;br&gt;hp: &quot;, mtcars$hp, &quot;&lt;br&gt;qsec: &quot;, mtcars$qsec, &quot;&lt;br&gt;Cyl: &quot;, mtcars$cyl), hoverinfo = &#39;text&#39;, mode = &#39;markers&#39;, transforms = list( list( type = &#39;groupby&#39;, groups = mtcars$cyl, styles = list( list(target = 4, value = list(marker =list(color = &#39;blue&#39;))), list(target = 6, value = list(marker =list(color = &#39;red&#39;))), list(target = 8, value = list(marker =list(color = &#39;black&#39;))) ) ) ) ) fig 9.3 Aggregation 9.3.1 Basic Example library(plotly) fig &lt;- plot_ly( type = &#39;scatter&#39;, x = diamonds$cut, y = diamonds$price, mode = &#39;markers&#39;, transforms = list( list( type = &#39;aggregate&#39;, groups = diamonds$cut, aggregations = list( list( target = &#39;y&#39;, func = &#39;sum&#39;, enabled = T ) ) ) ) ) fig 9.3.2 Histogram Binning library(plotly) df &lt;- read.csv(&quot;https://plotly.com/~public.health/17.csv&quot;, skipNul = TRUE, encoding = &quot;UTF-8&quot;) labels &lt;- function(size, label) { list( args = c(&quot;xbins.size&quot;, size), label = label, method = &quot;restyle&quot; ) } fig &lt;- df %&gt;% plot_ly( x = ~date, autobinx = FALSE, autobiny = TRUE, marker = list(color = &quot;rgb(68, 68, 68)&quot;), name = &quot;date&quot;, type = &quot;histogram&quot;, xbins = list( end = &quot;2016-12-31 12:00&quot;, size = &quot;M1&quot;, start = &quot;1983-12-31 12:00&quot; ) ) fig &lt;- fig %&gt;% layout( paper_bgcolor = &quot;rgb(240, 240, 240)&quot;, plot_bgcolor = &quot;rgb(240, 240, 240)&quot;, title = &quot;&lt;b&gt;Shooting Incidents&lt;/b&gt;&lt;br&gt;use dropdown to change bin size&quot;, xaxis = list( type = &#39;date&#39; ), yaxis = list( title = &quot;Incidents&quot; ), updatemenus = list( list( x = 0.1, y = 1.15, active = 1, showactive = TRUE, buttons = list( labels(&quot;D1&quot;, &quot;Day&quot;), labels(&quot;M1&quot;, &quot;Month&quot;), labels(&quot;M6&quot;, &quot;Half Year&quot;), labels(&quot;M12&quot;, &quot;Year&quot;) ) ) ) ) fig 9.3.3 Mapping with Aggregations library(plotly) df &lt;- read.csv(&quot;https://raw.githubusercontent.com/bcdunbar/datasets/master/worldhappiness.csv&quot;) s &lt;- schema() agg &lt;- s$transforms$aggregate$attributes$aggregations$items$aggregation$func$values l = list() for (i in 1:length(agg)) { ll = list(method = &quot;restyle&quot;, args = list(&#39;transforms[0].aggregations[0].func&#39;, agg[i]), label = agg[i]) l[[i]] = ll } fig &lt;- df %&gt;% plot_ly( type = &#39;choropleth&#39;, locationmode = &#39;country names&#39;, locations = ~Country, z = ~HappinessScore, autocolorscale = F, reversescale = T, colorscale = &#39;Portland&#39;, transforms = list(list( type = &#39;aggregate&#39;, groups = ~Country, aggregations = list( list(target = &#39;z&#39;, func = &#39;sum&#39;, enabled = T) ) )) ) fig &lt;- fig %&gt;% layout( title = &quot;&lt;b&gt;World Happiness&lt;/b&gt;&quot;, geo = list( showframe = F, showcoastlines = F ), updatemenus = list( list( x = 0.25, y = 1.04, xref = &#39;paper&#39;, yref = &#39;paper&#39;, yanchor = &#39;top&#39;, buttons = l ) ) ) fig "],["animations.html", "Chapter 10 Animations 10.1 Intro to animations 10.2 Cumulative animations", " Chapter 10 Animations 10.1 Intro to animations 10.1.1 Basic Example library(plotly) df &lt;- data.frame( x = c(1,2,1), y = c(1,2,1), f = c(1,2,3) ) fig &lt;- df %&gt;% plot_ly( x = ~x, y = ~y, frame = ~f, type = &#39;scatter&#39;, mode = &#39;markers&#39;, showlegend = F ) fig 10.1.2 Mulitple Trace Animations library(plotly) library(gapminder) df &lt;- gapminder fig &lt;- df %&gt;% plot_ly( x = ~gdpPercap, y = ~lifeExp, size = ~pop, color = ~continent, frame = ~year, text = ~country, hoverinfo = &quot;text&quot;, type = &#39;scatter&#39;, mode = &#39;markers&#39; ) fig &lt;- fig %&gt;% layout( xaxis = list( type = &quot;log&quot; ) ) fig 10.1.3 Add Animation Options library(plotly) fig &lt;- fig %&gt;% animation_opts( 1000, easing = &quot;elastic&quot;, redraw = FALSE ) fig 10.1.4 Add Button Options library(plotly) fig &lt;- fig %&gt;% animation_button( x = 1, xanchor = &quot;right&quot;, y = 0, yanchor = &quot;bottom&quot; ) fig 10.2 Cumulative animations 10.2.1 Cumulative Lines Animation library(plotly) accumulate_by &lt;- function(dat, var) { var &lt;- lazyeval::f_eval(var, dat) lvls &lt;- plotly:::getLevels(var) dats &lt;- lapply(seq_along(lvls), function(x) { cbind(dat[var %in% lvls[seq(1, x)], ], frame = lvls[[x]]) }) dplyr::bind_rows(dats) } df &lt;- txhousing fig &lt;- df %&gt;% filter(year &gt; 2005, city %in% c(&quot;Abilene&quot;, &quot;Bay Area&quot;)) fig &lt;- fig %&gt;% accumulate_by(~date) fig &lt;- fig %&gt;% plot_ly( x = ~date, y = ~median, split = ~city, frame = ~frame, type = &#39;scatter&#39;, mode = &#39;lines&#39;, line = list(simplyfy = F) ) fig &lt;- fig %&gt;% layout( xaxis = list( title = &quot;Date&quot;, zeroline = F ), yaxis = list( title = &quot;Median&quot;, zeroline = F ) ) fig &lt;- fig %&gt;% animation_opts( frame = 100, transition = 0, redraw = FALSE ) fig &lt;- fig %&gt;% animation_slider( hide = T ) fig &lt;- fig %&gt;% animation_button( x = 1, xanchor = &quot;right&quot;, y = 0, yanchor = &quot;bottom&quot; ) fig 10.2.2 Filled-Area Animation library(plotly) library(quantmod) getSymbols(&quot;AAPL&quot;,src=&#39;yahoo&#39;) df &lt;- data.frame(Date=index(AAPL),coredata(AAPL)) df &lt;- tail(df, 30) df$ID &lt;- seq.int(nrow(df)) accumulate_by &lt;- function(dat, var) { var &lt;- lazyeval::f_eval(var, dat) lvls &lt;- plotly:::getLevels(var) dats &lt;- lapply(seq_along(lvls), function(x) { cbind(dat[var %in% lvls[seq(1, x)], ], frame = lvls[[x]]) }) dplyr::bind_rows(dats) } df &lt;- df %&gt;% accumulate_by(~ID) fig &lt;- df %&gt;% plot_ly( x = ~ID, y = ~AAPL.Close, frame = ~frame, type = &#39;scatter&#39;, mode = &#39;lines&#39;, fill = &#39;tozeroy&#39;, fillcolor=&#39;rgba(114, 186, 59, 0.5)&#39;, line = list(color = &#39;rgb(114, 186, 59)&#39;), text = ~paste(&quot;Day: &quot;, ID, &quot;&lt;br&gt;Close: $&quot;, AAPL.Close), hoverinfo = &#39;text&#39; ) fig &lt;- fig %&gt;% layout( title = &quot;AAPL: Last 30 days&quot;, yaxis = list( title = &quot;Close&quot;, range = c(0,250), zeroline = F, tickprefix = &quot;$&quot; ), xaxis = list( title = &quot;Day&quot;, range = c(0,30), zeroline = F, showgrid = F ) ) fig &lt;- fig %&gt;% animation_opts( frame = 100, transition = 0, redraw = FALSE ) fig &lt;- fig %&gt;% animation_slider( currentvalue = list( prefix = &quot;Day &quot; ) ) fig ## [1] &quot;AAPL&quot; "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
